/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package co.edu.intecap.clinicaveterinaria.vista.paneles;

import co.edu.intecap.clinicaveterinaria.control.TipoMascotaDelegado;
import co.edu.intecap.clinicaveterinaria.modelo.vo.TipoMascotaVo;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Lord_Nightmare
 */
public class TipoMascotaPanel extends javax.swing.JPanel {

    private DefaultTableModel modelo;
    private final TipoMascotaVo tipoMascotaVo;

    /**
     * Creates new form ClientePanel
     */
    public TipoMascotaPanel() {
        initComponents();
        configurarTabla();
        llenarTabla(new TipoMascotaDelegado(this).consultarTipoMascotas(), modelo);
        this.tipoMascotaVo = new TipoMascotaVo();
    }

    /**
     * metodo para obtener valores del GUI y registrar un nuevo tipo de mascota
     */
    private void registrarTipoMascota() {
        // asignar nombre del tipo de mascota
        tipoMascotaVo.setNombre(txtNombre.getText());
        tipoMascotaVo.setEstado(cbxEstado.isSelected());
        new TipoMascotaDelegado(this).registrarTipoMascota(tipoMascotaVo);
        // mensaje de confirmacion de registro
        JOptionPane.showMessageDialog(
                this,
                "Tipo de mascota Registrado",
                "Registro de datos",
                JOptionPane.INFORMATION_MESSAGE
        );
        refrescarTabla();
        limpiarCampos();
    }

    /**
     * Permite establecer los parametros iniciales de una tabla
     */
    private void configurarTabla() {
        modelo = new DefaultTableModel();
        modelo.addColumn("Id Mascota");
        modelo.addColumn("Nombre");
        modelo.addColumn("estado");
        tblTipoMascota.setModel(modelo);
        tblTipoMascota.getSelectionModel().addListSelectionListener(tableListener);
    }

    /**
     * Carga una lista de tipos de mascota desde la base de datos 
     * a la tabla de la intefaz grafica de usuario
     * @param listaTipoMascota lista de tipos de mascota de la base de datos
     * @param modelo Modelo de tabla con la estructura de los datos a cargar
     */
    private void llenarTabla(List<TipoMascotaVo> listaTipoMascota, DefaultTableModel modelo) {
        for (TipoMascotaVo tipoMascotaVo : listaTipoMascota) {
            Object[] fila = new Object[3];
            fila[0] = tipoMascotaVo.getIdTipoMascota();
            fila[1] = tipoMascotaVo.getNombre();
            fila[2] = tipoMascotaVo.isEstado();
            modelo.addRow(fila);
        }
        tblTipoMascota.updateUI();
    }
    
    /**
     * Actualiza la informacion de la tabla con cada vez que se realiza
     * un registro
     */
    private void refrescarTabla(){
        modelo.setRowCount(0);
        List<TipoMascotaVo> listaMascotas = new TipoMascotaDelegado(this).consultarTipoMascotas();
        llenarTabla(listaMascotas, modelo);
    }
    
    private void limpiarCampos(){
        txtNombre.setText("");
        cbxEstado.setSelected(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        txtNombre = new javax.swing.JTextField();
        cbxEstado = new javax.swing.JCheckBox();
        jLabel4 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblTipoMascota = new javax.swing.JTable();
        btnGuardar = new javax.swing.JButton();

        jLabel1.setText("Nombre:");

        cbxEstado.setText("Activo");

        jLabel4.setText("Estado:");

        tblTipoMascota.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(tblTipoMascota);

        btnGuardar.setText("Guardar");
        btnGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGuardarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel4))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtNombre, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(189, 189, 189))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(5, 5, 5)
                                .addComponent(cbxEstado, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(btnGuardar))))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                        .addContainerGap())
                    .addComponent(jSeparator1)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(txtNombre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cbxEstado)
                    .addComponent(jLabel4)
                    .addComponent(btnGuardar))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGuardarActionPerformed
        this.registrarTipoMascota();
    }//GEN-LAST:event_btnGuardarActionPerformed

    ListSelectionListener tableListener = new ListSelectionListener() {
        @Override
        public void valueChanged(ListSelectionEvent e) {
            if (tblTipoMascota.getSelectedRow() > -1) {
                // se obtiene el id de la fila seleccionada en la tabla
                int id = (int) tblTipoMascota.getValueAt(tblTipoMascota.getSelectedRow(), 0);
                System.out.println(id);
                // consultar en la base de datos por ese id seleccionado y guardar el 
                // resultado de la consulta en un nuevo objet de TipoMascotaVo
                TipoMascotaVo tMvo = new TipoMascotaDelegado(TipoMascotaPanel.this).consultarTipoMascota(id);
                // asignar los valores obtenidos de la consulta a la constante
                tipoMascotaVo.setIdTipoMascota(tMvo.getIdTipoMascota());
                tipoMascotaVo.setNombre(tMvo.getNombre());
                tipoMascotaVo.setEstado(tMvo.isEstado());
                // llenar campos del formulario
                llenarCampos();
            }
        }
    };
    
    private void llenarCampos(){
        txtNombre.setText(tipoMascotaVo.getNombre());
        cbxEstado.setSelected(tipoMascotaVo.isEstado());
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnGuardar;
    private javax.swing.JCheckBox cbxEstado;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTable tblTipoMascota;
    private javax.swing.JTextField txtNombre;
    // End of variables declaration//GEN-END:variables
}
